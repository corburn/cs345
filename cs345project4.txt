SQL> 
SQL> -- Tables with foreign keys must be dropped before the tables they reference.
SQL> -- Drop tables in the opposite request they are created.
SQL> --request_item references menu_item and order
SQL> @seed/drop_request_item
SQL> -- Drop table if exists
SQL> BEGIN
  2  	EXECUTE IMMEDIATE 'DROP TABLE request_item';
  3  EXCEPTION
  4  	WHEN OTHERS THEN
  5  	   -- Table or view does not exist
  6  	   IF SQLCODE != -942 THEN
  7  	      RAISE;
  8  	   END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Drop sequence if exists
SQL> BEGIN
  2  	 EXECUTE IMMEDIATE 'DROP SEQUENCE request_item_seq';
  3  EXCEPTION
  4  	 WHEN OTHERS THEN
  5  	     -- Sequence does not exist
  6  	     IF SQLCODE != -02289 THEN
  7  		 RAISE;
  8  	     END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> -- menu_item references restaurant
SQL> @seed/drop_menu_item
SQL> -- Drop table if exists
SQL> BEGIN
  2  	EXECUTE IMMEDIATE 'DROP TABLE menu_item';
  3  EXCEPTION
  4  	WHEN OTHERS THEN
  5  	   -- Table or view does not exist
  6  	   IF SQLCODE != -942 THEN
  7  	      RAISE;
  8  	   END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Drop sequence if exists
SQL> BEGIN
  2  	 EXECUTE IMMEDIATE 'DROP SEQUENCE menu_item_seq';
  3  EXCEPTION
  4  	 WHEN OTHERS THEN
  5  	     -- Sequence does not exist
  6  	     IF SQLCODE != -02289 THEN
  7  		 RAISE;
  8  	     END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> -- request references employee and customer_location
SQL> @seed/drop_request
SQL> -- Drop table if exists
SQL> BEGIN
  2  	EXECUTE IMMEDIATE 'DROP TABLE request';
  3  EXCEPTION
  4  	WHEN OTHERS THEN
  5  	   -- Table or view does not exist
  6  	   IF SQLCODE != -942 THEN
  7  	      RAISE;
  8  	   END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Drop sequence if exists
SQL> BEGIN
  2  	 EXECUTE IMMEDIATE 'DROP SEQUENCE request_seq';
  3  EXCEPTION
  4  	 WHEN OTHERS THEN
  5  	     -- Sequence does not exist
  6  	     IF SQLCODE != -02289 THEN
  7  		 RAISE;
  8  	     END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> -- vehicle references employee
SQL> @seed/drop_vehicle
SQL> -- Drop table if exists
SQL> BEGIN
  2  	EXECUTE IMMEDIATE 'DROP TABLE vehicle';
  3  EXCEPTION
  4  	WHEN OTHERS THEN
  5  	   -- Table or view does not exist
  6  	   IF SQLCODE != -942 THEN
  7  	      RAISE;
  8  	   END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Drop sequence if exists
SQL> BEGIN
  2  	 EXECUTE IMMEDIATE 'DROP SEQUENCE vehicle_seq';
  3  EXCEPTION
  4  	 WHEN OTHERS THEN
  5  	     -- Sequence does not exist
  6  	     IF SQLCODE != -02289 THEN
  7  		 RAISE;
  8  	     END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> -- schedule reference employee
SQL> @seed/drop_schedule
SQL> -- Drop table if exists
SQL> BEGIN
  2  	 EXECUTE IMMEDIATE 'DROP TABLE schedule';
  3  EXCEPTION
  4  	WHEN OTHERS THEN
  5  	   IF SQLCODE != -942 THEN
  6  	      RAISE;
  7  	   END IF;
  8  END;
  9  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Drop sequence if exists
SQL> BEGIN
  2  	 EXECUTE IMMEDIATE 'DROP SEQUENCE schedule_seq';
  3  EXCEPTION
  4  	 WHEN OTHERS THEN
  5  	     -- Sequence does not exist
  6  	     IF SQLCODE != -02289 THEN
  7  		 RAISE;
  8  	     END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> @seed/drop_employee
SQL> -- Drop table if exists
SQL> BEGIN
  2  	 EXECUTE IMMEDIATE 'DROP TABLE employee';
  3  EXCEPTION
  4  	WHEN OTHERS THEN
  5  	   -- Table or view does not exist
  6  	   IF SQLCODE != -942 THEN
  7  	      RAISE;
  8  	   END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Drop sequence if exists
SQL> BEGIN
  2  	 EXECUTE IMMEDIATE 'DROP SEQUENCE employee_seq';
  3  EXCEPTION
  4  	 WHEN OTHERS THEN
  5  	     -- Sequence does not exist
  6  	     IF SQLCODE != -02289 THEN
  7  		 RAISE;
  8  	     END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> @seed/drop_restaurant
SQL> -- Drop table if exists
SQL> BEGIN
  2  	EXECUTE IMMEDIATE 'DROP TABLE restaurant';
  3  EXCEPTION
  4  	WHEN OTHERS THEN
  5  	   -- Table or view does not exist
  6  	   IF SQLCODE != -942 THEN
  7  	      RAISE;
  8  	   END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Drop sequence if exists
SQL> BEGIN
  2  	 EXECUTE IMMEDIATE 'DROP SEQUENCE restaurant_seq';
  3  EXCEPTION
  4  	 WHEN OTHERS THEN
  5  	     -- Sequence does not exist
  6  	     IF SQLCODE != -02289 THEN
  7  		 RAISE;
  8  	     END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> -- customer_location references customer
SQL> @seed/drop_customer_location
SQL> -- Drop table if exists
SQL> BEGIN
  2  	EXECUTE IMMEDIATE 'DROP TABLE customer_location';
  3  EXCEPTION
  4  	WHEN OTHERS THEN
  5  	   -- Table or view does not exist
  6  	   IF SQLCODE != -942 THEN
  7  	      RAISE;
  8  	   END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Drop sequence if exists
SQL> BEGIN
  2  	 EXECUTE IMMEDIATE 'DROP SEQUENCE customer_location_seq';
  3  EXCEPTION
  4  	 WHEN OTHERS THEN
  5  	     -- Sequence does not exist
  6  	     IF SQLCODE != -02289 THEN
  7  		 RAISE;
  8  	     END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> @seed/drop_customer
SQL> -- Drop table if exists
SQL> BEGIN
  2  	EXECUTE IMMEDIATE 'DROP TABLE customer';
  3  EXCEPTION
  4  	WHEN OTHERS THEN
  5  	   -- Table or view does not exist
  6  	   IF SQLCODE != -942 THEN
  7  	      RAISE;
  8  	   END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Drop sequence if exists
SQL> BEGIN
  2  	 EXECUTE IMMEDIATE 'DROP SEQUENCE customer_seq';
  3  EXCEPTION
  4  	 WHEN OTHERS THEN
  5  	     -- Sequence does not exist
  6  	     IF SQLCODE != -02289 THEN
  7  		 RAISE;
  8  	     END IF;
  9  END;
 10  /

PL/SQL procedure successfully completed.

SQL> 
SQL> -- Re-instantiated the tables
SQL> @seed/customer
SQL> CREATE TABLE customer(
  2  	 cus_id INT CONSTRAINT cus_pk PRIMARY KEY DEFERRABLE INITIALLY IMMEDIATE,
  3  	 cus_phone VARCHAR(255) CONSTRAINT cus_phone_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  4  	 cus_fname VARCHAR(255) CONSTRAINT cus_fname_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  5  	 cus_lname VARCHAR(255) CONSTRAINT cus_lname_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  6  	 cus_email VARCHAR(255) CONSTRAINT cus_email_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE CONSTRAINT cus_email_uq_cnst UNIQUE DEFERRABLE INITIALLY IMMEDIATE
  7  );

Table created.

SQL> 
SQL> -- Autoincrement primary key
SQL> -- If a value for the primary key is unspecified, it will be set to the next number in the sequence.
SQL> CREATE SEQUENCE customer_seq;

Sequence created.

SQL> CREATE TRIGGER customer_trig
  2  BEFORE INSERT ON customer
  3  FOR EACH ROW
  4  BEGIN
  5  	   SELECT customer_seq.NEXTVAL
  6  	   INTO :new.cus_id
  7  	   FROM dual;
  8  END;
  9  /

Trigger created.

SQL> 
SQL> INSERT INTO customer(cus_phone, cus_fname, cus_lname, cus_email)
  2  VALUES ('9285559876', 'Hank', 'Williams', 'hank.williams@email.com');

1 row created.

SQL> 
SQL> INSERT INTO customer(cus_phone, cus_fname, cus_lname, cus_email)
  2  VALUES ('9285559991', 'Bob', 'Boolean', 'truefalse@bool.org');

1 row created.

SQL> 
SQL> INSERT INTO customer(cus_phone, cus_fname, cus_lname, cus_email)
  2  VALUES ('9285551298', 'Suzy', 'Smith', 'suzy@email.com');

1 row created.

SQL> 
SQL> INSERT INTO customer(cus_phone, cus_fname, cus_lname, cus_email)
  2  VALUES ('4805681652', 'Jospeh', 'Stalin', 'mustache@ussr.gov');

1 row created.

SQL> 
SQL> INSERT INTO customer(cus_phone, cus_fname, cus_lname, cus_email)
  2  VALUES ('9284562845', 'Steve', 'Smith', 'steve@email.com');

1 row created.

SQL> 
SQL> INSERT INTO customer(cus_phone, cus_fname, cus_lname, cus_email)
  2  VALUES ('9284628453', 'Andrea', 'Brazil', 'latindance@email.com');

1 row created.

SQL> 
SQL> INSERT INTO customer(cus_phone, cus_fname, cus_lname, cus_email)
  2  VALUES ('2138854962', 'Zach', 'Surfer', 'surferdude@email.com');

1 row created.

SQL> @seed/customer_location
SQL> CREATE TABLE customer_location(
  2  	 cus_loc_id INT CONSTRAINT cus_loc_pk PRIMARY KEY DEFERRABLE INITIALLY IMMEDIATE,
  3  	 cus_id INT CONSTRAINT cus_id_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  4  	 cus_add_1 VARCHAR(255) CONSTRAINT cus_add_1_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  5  	 cus_add_2 VARCHAR(255),
  6  	 cus_loc_zip VARCHAR(255) CONSTRAINT cus_loc_zip_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  7  	 cus_loc_phone VARCHAR(255) CONSTRAINT cus_loc_phone_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  8  	 cus_instructions VARCHAR(255),
  9  	 CONSTRAINT cus_loc_cus_id_fk FOREIGN KEY(cus_id) REFERENCES customer(cus_id)
 10  );

Table created.

SQL> 
SQL> -- Autoincrement primary key
SQL> -- If a value for the primary key is unspecified, it will be set to the next number in the sequence.
SQL> CREATE SEQUENCE customer_location_seq;

Sequence created.

SQL> CREATE TRIGGER customer_location_trig
  2  BEFORE INSERT ON customer_location
  3  FOR EACH ROW
  4  BEGIN
  5  	   SELECT customer_location_seq.NEXTVAL
  6  	   INTO :new.cus_loc_id
  7  	   FROM dual;
  8  END;
  9  /

Trigger created.

SQL> 
SQL> --Add test data
SQL> INSERT INTO customer_location(cus_id, cus_add_1, cus_add_2, cus_loc_zip, cus_loc_phone, cus_instructions)
  2  VALUES (1, '21 Jump St.', null, '45221', '9285551233', 'Deliver to back door');

1 row created.

SQL> 
SQL> INSERT INTO customer_location(cus_id, cus_add_1, cus_add_2, cus_loc_zip, cus_loc_phone, cus_instructions)
  2  VALUES (1, '11 N. Peace Ave.', 'apt #15', '45221', '9285551919', null);

1 row created.

SQL> 
SQL> INSERT INTO customer_location(cus_id, cus_add_1, cus_add_2, cus_loc_zip, cus_loc_phone, cus_instructions)
  2  VALUES (2, '2050 Huntington Dr.', 'apt #215', '45211', '9285551111', 'Second floor');

1 row created.

SQL> 
SQL> INSERT INTO customer_location(cus_id, cus_add_1, cus_add_2, cus_loc_zip, cus_loc_phone, cus_instructions)
  2  VALUES (3, '564 W. Moore St.', null, '45220', '9285551298', null);

1 row created.

SQL> 
SQL> INSERT INTO customer_location(cus_id, cus_add_1, cus_add_2, cus_loc_zip, cus_loc_phone, cus_instructions)
  2  VALUES (4, '1917 E. Red Blvd.', null, '45211', '4805681652', 'Behind concrete wall');

1 row created.

SQL> 
SQL> INSERT INTO customer_location(cus_id, cus_add_1, cus_add_2, cus_loc_zip, cus_loc_phone, cus_instructions)
  2  VALUES (5, '654 N. Acorn Ln.', 'apt #22', '45220', '9284562845', null);

1 row created.

SQL> 
SQL> INSERT INTO customer_location(cus_id, cus_add_1, cus_add_2, cus_loc_zip, cus_loc_phone, cus_instructions)
  2  VALUES (5, '555 Grey Dr.', 'suite 56', '45211', '9285561238', 'Last business on the right');

1 row created.

SQL> 
SQL> INSERT INTO customer_location(cus_id, cus_add_1, cus_add_2, cus_loc_zip, cus_loc_phone, cus_instructions)
  2  VALUES (6, '7895 S. Chile Ln.', null, '45211', '6458962157', null);

1 row created.

SQL> 
SQL> INSERT INTO customer_location(cus_id, cus_add_1, cus_add_2, cus_loc_zip, cus_loc_phone, cus_instructions)
  2  VALUES (7, '456 W. Sunny Rd.', null, '45221', '2138854962', null);

1 row created.

SQL> @seed/restaurant
SQL> CREATE TABLE restaurant(
  2  	 res_id INT CONSTRAINT restaurant_pk PRIMARY KEY DEFERRABLE INITIALLY IMMEDIATE,
  3  	 res_name VARCHAR(255) CONSTRAINT res_name_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  4  	 res_add_1 VARCHAR(255) CONSTRAINT res_add_1_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  5  	 res_add_2 VARCHAR(255),
  6  	 res_zip VARCHAR(255) CONSTRAINT res_zip_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  7  	 res_phone VARCHAR(255) CONSTRAINT res_phone_nn_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  8  	 res_instructions VARCHAR(255)
  9  );

Table created.

SQL> 
SQL> -- Autoincrement primary key
SQL> -- If a value for the primary key is unspecified, it will be set to the next number in the sequence.
SQL> CREATE SEQUENCE restaurant_seq;

Sequence created.

SQL> CREATE TRIGGER restaurant_trig
  2  BEFORE INSERT ON restaurant
  3  FOR EACH ROW
  4  BEGIN
  5  	   SELECT restaurant_seq.NEXTVAL
  6  	   INTO :new.res_id
  7  	   FROM dual;
  8  END;
  9  /

Trigger created.

SQL> 
SQL> INSERT INTO restaurant (res_name, res_add_1, res_add_2, res_zip, res_phone, res_instructions)
  2  VALUES ('Freddy Fazbear''s Pizza', '3345 S. Jump St.', 'Suite #11', '45221', '4502263154',
  3  	     'Farthest right location at the strip mall');

1 row created.

SQL> 
SQL> INSERT INTO restaurant (res_name, res_add_1, res_add_2, res_zip, res_phone, res_instructions)
  2  VALUES ('Pizza Planet', '122 N. Toy Ave.', Null, '45221', '4505452221', Null);

1 row created.

SQL> 
SQL> INSERT INTO restaurant (res_name, res_add_1, res_add_2, res_zip, res_phone, res_instructions)
  2  VALUES ('Krusty Burger', '1990 W. Homer St.', Null, '45221', '4508963214', Null);

1 row created.

SQL> @seed/employee
SQL> CREATE TABLE employee(
  2  	 emp_id INT CONSTRAINT emp_pk PRIMARY KEY DEFERRABLE INITIALLY IMMEDIATE,
  3  	 emp_phone VARCHAR(255) CONSTRAINT emp_phone_cnst NOT NULL,
  4  	 emp_fname VARCHAR(255) CONSTRAINT emp_fname_cnst NOT NULL,
  5  	 emp_lname VARCHAR(255) CONSTRAINT emp_lname_cnst NOT NULL,
  6  	 emp_email VARCHAR(255) CONSTRAINT emp_email_cnst NOT NULL
  7  );

Table created.

SQL> 
SQL> -- Autoincrement primary key
SQL> -- If a value for the primary key is unspecified, it will be set to the next number in the sequence.
SQL> CREATE SEQUENCE employee_seq;

Sequence created.

SQL> CREATE TRIGGER employee_trig
  2  BEFORE INSERT ON employee
  3  FOR EACH ROW
  4  BEGIN
  5  	   SELECT employee_seq.NEXTVAL
  6  	   INTO :new.emp_id
  7  	   FROM dual;
  8  END;
  9  /

Trigger created.

SQL> 
SQL> INSERT ALL
  2  INTO employee VALUES(1, '9280112358', 'Elvis', 'Presley', 'is@dead.io')
  3  INTO employee VALUES(2, '9280132134', 'Elvis', 'Presley', 'is@alive.io')
  4  INTO employee VALUES(3, '9283141592', 'Erwin', 'Schrodinger', 'i@like.cats')
  5  INTO employee VALUES(4, '5155621569', 'John', 'Booth', 'ihateabe@confederate.gov')
  6  INTO employee VALUES(5, '9284562318', 'Sirhan', 'Sirhan', 'shooter@guns.com')
  7  INTO employee VALUES(6, '9284812369', 'Charles', 'Guiteau', 'ihatemonday@lasagna.fat')
  8  select 1 from dual;

6 rows created.

SQL> column emp_phone format A15;
SQL> column emp_fname format A15;
SQL> column emp_lname format A15;
SQL> column emp_email format A15;
SQL> 
SQL> 
SQL> 
SQL> @seed/schedule
SQL> CREATE TABLE schedule(
  2  	 sche_id INT CONSTRAINT sche_pk PRIMARY KEY DEFERRABLE INITIALLY IMMEDIATE,
  3  	 emp_id INT CONSTRAINT sche_emp_id_cnst NOT NULL,
  4  	 sche_start DATE CONSTRAINT sche_sche_start_cnst NOT NULL,
  5  	 sche_end DATE CONSTRAINT sche_sche_end_cnst NOT NULL,
  6  	 CONSTRAINT emp_id_fk FOREIGN KEY (emp_id) REFERENCES employee(emp_id) DEFERRABLE INITIALLY IMMEDIATE
  7  );

Table created.

SQL> 
SQL> -- Autoincrement primary key
SQL> -- If a value for the primary key is unspecified, it will be set to the next number in the sequence.
SQL> CREATE SEQUENCE schedule_seq;

Sequence created.

SQL> CREATE TRIGGER schedule_trig
  2  BEFORE INSERT ON schedule
  3  FOR EACH ROW
  4  BEGIN
  5  	   SELECT schedule_seq.NEXTVAL
  6  	   INTO :new.sche_id
  7  	   FROM dual;
  8  END;
  9  /

Trigger created.

SQL> 
SQL> INSERT ALL
  2  INTO schedule(sche_id, emp_id, sche_start, sche_end) VALUES (1, 1, TO_DATE('2015-03-29 08:00', 'yyyy-mm-dd hh24:mi'), TO_DATE('2015-03-29 12:00', 'yyyy-mm-dd hh24:mi'))
  3  INTO schedule(sche_id, emp_id, sche_start, sche_end) VALUES (2, 1, TO_DATE('2015-03-29 13:00', 'yyyy-mm-dd hh24:mi'), TO_DATE('2015-03-29 17:00', 'yyyy-mm-dd hh24:mi'))
  4  INTO schedule(sche_id, emp_id, sche_start, sche_end) VALUES (3, 1, TO_DATE('2015-03-29 08:00', 'yyyy-mm-dd hh24:mi'), TO_DATE('2015-03-29 12:00', 'yyyy-mm-dd hh24:mi'))
  5  SELECT 1 FROM dual;

3 rows created.

SQL> @seed/vehicle
SQL> CREATE TABLE vehicle(
  2  	 veh_id INT CONSTRAINT veh_pk PRIMARY KEY DEFERRABLE INITIALLY IMMEDIATE,
  3  	 emp_id INT CONSTRAINT veh_emp_id_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  4  	 veh_make VARCHAR(255) CONSTRAINT veh_make_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  5  	 veh_model VARCHAR(255) CONSTRAINT veh_model_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  6  	 veh_year SMALLINT CONSTRAINT veh_year_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  7  	 veh_color VARCHAR(255) CONSTRAINT veh_color_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  8  	 veh_lic_plt CHAR(10) CONSTRAINT veh_lic_plt_cnst NOT NULL DEFERRABLE INITIALLY IMMEDIATE,
  9  	 CONSTRAINT veh_emp_id_fk FOREIGN KEY (emp_id) REFERENCES employee(emp_id) DEFERRABLE INITIALLY IMMEDIATE
 10  );

Table created.

SQL> 
SQL> -- Autoincrement primary key
SQL> -- If a value for the primary key is unspecified, it will be set to the next number in the sequence.
SQL> CREATE SEQUENCE vehicle_seq;

Sequence created.

SQL> CREATE TRIGGER vehicle_trig
  2  BEFORE INSERT ON vehicle
  3  FOR EACH ROW
  4  BEGIN
  5  	   SELECT vehicle_seq.NEXTVAL
  6  	   INTO :new.veh_id
  7  	   FROM dual;
  8  END;
  9  /

Trigger created.

SQL> 
SQL> INSERT ALL
  2  INTO vehicle(veh_id, emp_id, veh_make, veh_model, veh_year, veh_color, veh_lic_plt) VALUES (1, 1, 'Stutz', 'Blackhawk', 1971, 'Black', 'HHBL9')
  3  INTO vehicle(veh_id, emp_id, veh_make, veh_model, veh_year, veh_color, veh_lic_plt) VALUES (2, 2, 'Cadillac', 'Fleetwood', 1955, 'Pink', 'LPN9')
  4  INTO vehicle(veh_id, emp_id, veh_make, veh_model, veh_year, veh_color, veh_lic_plt) VALUES (3, 2, 'Ford', 'Thunderbird', 1967, 'Red', 'YANBAHD9')
  5  SELECT 1 FROM dual;

3 rows created.

SQL> 
SQL> 
SQL> @seed/request
SQL> CREATE TABLE request(
  2  	 request_id INT CONSTRAINT request_pk PRIMARY KEY,
  3  	 cus_loc_id INT CONSTRAINT request_cus_loc_id_nn_cnst NOT NULL,
  4  	 --prc_request_add procedure adds the current logged in user to this column
  5  	 dispatcher VARCHAR2(20),
  6  	 driver_id INT,
  7  	 total_price NUMBER(9,2),
  8  	 create_time DATE CONSTRAINT request_create_time_nn_cnst NOT NULL,
  9  	 dispatch_time DATE,
 10  	 estim_pickup DATE,
 11  	 delivery_pickup DATE,
 12  	 delivery_complete DATE,
 13  	 CONSTRAINT cus_loc_id_fk FOREIGN KEY (cus_loc_id) REFERENCES customer_location(cus_loc_id),
 14  	 CONSTRAINT request_driver_fk FOREIGN KEY (driver_id) REFERENCES employee(emp_id)
 15  );

Table created.

SQL> 
SQL> -- Autoincrement primary key
SQL> -- If a value for the primary key is unspecified, it will be set to the next number in the sequence.
SQL> CREATE SEQUENCE request_seq;

Sequence created.

SQL> CREATE TRIGGER request_trig
  2  BEFORE INSERT ON request
  3  FOR EACH ROW
  4  BEGIN
  5  	   SELECT request_seq.NEXTVAL
  6  	   INTO :new.request_id
  7  	   FROM dual;
  8  END;
  9  /

Trigger created.

SQL> 
SQL> @seed/menu_item
SQL> CREATE TABLE menu_item(
  2  	 item_id INT CONSTRAINT menu_item_pk PRIMARY KEY DEFERRABLE INITIALLY IMMEDIATE,
  3  	 res_id INT CONSTRAINT menu_item_res_id_nn_cnst NOT NULL,
  4  	 item_name VARCHAR(255) CONSTRAINT menu_item_item_name_nn_cnst NOT NULL,
  5  	 --added this line because we need prices to make sales right?
  6  	 item_price NUMBER(9,2),
  7  	 item_description VARCHAR(255),
  8  	 CONSTRAINT menu_item_res_id_fk FOREIGN KEY (res_id) REFERENCES restaurant(res_id)
  9  );

Table created.

SQL> 
SQL> -- Autoincrement primary key
SQL> -- If a value for the primary key is unspecified, it will be set to the next number in the sequence.
SQL> CREATE SEQUENCE menu_item_seq;

Sequence created.

SQL> CREATE TRIGGER menu_item_trig
  2  BEFORE INSERT ON menu_item
  3  FOR EACH ROW
  4  BEGIN
  5  	   SELECT menu_item_seq.NEXTVAL
  6  	   INTO :new.item_id
  7  	   FROM dual;
  8  END;
  9  /

Trigger created.

SQL> 
SQL> INSERT INTO menu_item (res_id, item_name, item_description, item_price)
  2  VALUES (1, 'Hunka Hunka Burnin'' Love',
  3  	     'Sliced Rocky Mountain Oyster glazed with a tangy Habanero glaze', 12.99);

1 row created.

SQL> 
SQL> INSERT INTO menu_item (res_id, item_name, item_description, item_price)
  2  VALUES (1, 'Love Me Tender', 'Seared beef tenderloin with sauteed mushrooms', 17.99);

1 row created.

SQL> 
SQL> INSERT INTO menu_item (res_id, item_name, item_description, item_price)
  2  VALUES (1, 'Hound Dog', 'Dachshund sausage', 5.50);

1 row created.

SQL> 
SQL> INSERT INTO menu_item (res_id, item_name, item_description, item_price)
  2  VALUES (2, 'All Shook Up', '180 ounces of milk-shake, all flavors', 3.99);

1 row created.

SQL> 
SQL> INSERT INTO menu_item (res_id, item_name, item_description, item_price)
  2  VALUES (2, 'Alright, Okay, You Win', '64 slices of bacon wrapped in...bacon', 29.99);

1 row created.

SQL> 
SQL> INSERT INTO menu_item (res_id, item_name, item_description, item_price)
  2  VALUES (2, 'I''ll Never Know', 'Mystery meat-loaf', 11.95);

1 row created.

SQL> 
SQL> INSERT INTO menu_item (res_id, item_name, item_description, item_price)
  2  VALUES (3, 'Slice of Heaven', 'Pecan Pumpkin Pie', 5.99);

1 row created.

SQL> 
SQL> INSERT INTO menu_item (res_id, item_name, item_description, item_price)
  2  VALUES (3, 'Turducken Slammer', 'Perfect storm of the top 3 edible birds', 19.99);

1 row created.

SQL> 
SQL> INSERT INTO menu_item (res_id, item_name, item_description, item_price)
  2  VALUES (3, 'Cannibal''s Clown Burger', 'Does this taste funny to you', 4.99);

1 row created.

SQL> @seed/request_item
SQL> CREATE TABLE request_item(
  2  	 item_id INT,
  3  	 request_id INT,
  4  	 CONSTRAINT request_item_pk PRIMARY KEY (item_id, request_id)
  5  );

Table created.

SQL> 
SQL> -------------------------------------------
SQL> --Procedures
SQL> -------------------------------------------
SQL> -- Remove any procedures that were created
SQL> @seed/procedures/prc_request_add
SP2-0310: unable to open file "seed/procedures/prc_request_add.sql"
SQL> @seed/procedures/prc_req_item_add
SP2-0310: unable to open file "seed/procedures/prc_req_item_add.sql"
SQL> 
SQL> SPOOL OFF
